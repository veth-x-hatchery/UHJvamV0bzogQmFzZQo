import "../../../scripts/Fastfile"

default_platform(:android)

platform :android do

  before_all do
    load_env
  end

  private_lane :aab_file_path do
    "#{root_path}/build/app/outputs/bundle/release/app-release.aab"
  end

  private_lane :apk_file_path do
    "#{root_path}/build/app/outputs/apk/release/app-release.apk"
  end

  private_lane :build_apk do

    clean_environment

    fetch_dependencies

    build_autogenerated_code

    sh_on_root(command: "flutter build apk --release #{dart_define}")
  end

  lane :build do

    clean_environment
    
    fetch_dependencies

    # build_autogenerated_code

    sh_on_root(command: "flutter build appbundle --no-pub --release --suppress-analytics #{dart_define}")
  end

  lane :firebase_token do

    firebase_app_distribution_login
  end

  lane :deploy_firebase do

    build_apk

    test

    firebase_app_distribution(
      service_credentials_file: ENV["FIREBASE_DIST_SERVICE_ACCOUNT_FILE"],
      firebase_cli_token: ENV["FIREBASE_TOKEN"],
      app: ENV['FIREBASE_APP_ID_ANDROID'],
      android_artifact_type: "APK",
      android_artifact_path: apk_file_path,
      # release_notes: optional_changelog,
      # groups: "developers, staging"
      testers_file: ENV['FIREBASE_TESTERS_FILE']
    )
  end

  desc "submit a new Internal Build to Play Store"
  lane :deploy_internal do
    
    build

    test
    
    upload_to_play_store(track: 'internal', aab: aab_file_path, skip_upload_apk: true)
  end

  desc "promote Internal to Alpha"
  lane :promote_internal_to_alpha do
    upload_to_play_store(track: 'internal', track_promote_to: 'alpha')
  end

  desc "promote Alpha to Beta"
  lane :promote_alpha_to_beta do
    upload_to_play_store(track: 'alpha', track_promote_to: 'beta')
  end

  desc "promote Beta to Production"
  lane :promote_beta_to_production do
    upload_to_play_store(track: 'beta', track_promote_to: 'production')
  end

  ############################# POST ##############################

  after_all do |lane|

    slack(
      message: "fastlane to Android was successful",
      success: true,
      default_payloads: [:lane, :test_result, :git_branch, :git_author]
    )

    # if (File.exist?(aab_file_path))
    #   File.delete(aab_file_path)
    # end
# 
    # if (File.exist?(apk_file_path))
    #   File.delete(apk_file_path)
    # end

    notification(subtitle: "Finished Building (Android)", message: "Fastlane finished '#{lane}' successfully")
  end

  error do |lane, exception|

    slack(
      message: exception.message,
      success: false
    )
    
    notification(subtitle: "Finished Building (Android)", message: "Fastlane '#{lane}' errored")
  end
end