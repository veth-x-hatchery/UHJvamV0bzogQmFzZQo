// Mocks generated by Mockito 5.0.15 from annotations
// in vethx_beta/test/features/authentication/infrastructure/local_auth.service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:local_auth/auth_strings.dart' as _i4;
import 'package:local_auth/local_auth.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [LocalAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalAuthentication extends _i1.Mock
    implements _i2.LocalAuthentication {
  MockLocalAuthentication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get canCheckBiometrics =>
      (super.noSuchMethod(Invocation.getter(#canCheckBiometrics),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> authenticateWithBiometrics(
          {String? localizedReason,
          bool? useErrorDialogs = true,
          bool? stickyAuth = false,
          _i4.AndroidAuthMessages? androidAuthStrings =
              const _i4.AndroidAuthMessages(),
          _i4.IOSAuthMessages? iOSAuthStrings = const _i4.IOSAuthMessages(),
          bool? sensitiveTransaction = true}) =>
      (super.noSuchMethod(
          Invocation.method(#authenticateWithBiometrics, [], {
            #localizedReason: localizedReason,
            #useErrorDialogs: useErrorDialogs,
            #stickyAuth: stickyAuth,
            #androidAuthStrings: androidAuthStrings,
            #iOSAuthStrings: iOSAuthStrings,
            #sensitiveTransaction: sensitiveTransaction
          }),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> authenticate(
          {String? localizedReason,
          bool? useErrorDialogs = true,
          bool? stickyAuth = false,
          _i4.AndroidAuthMessages? androidAuthStrings =
              const _i4.AndroidAuthMessages(),
          _i4.IOSAuthMessages? iOSAuthStrings = const _i4.IOSAuthMessages(),
          bool? sensitiveTransaction = true,
          bool? biometricOnly = false}) =>
      (super.noSuchMethod(
          Invocation.method(#authenticate, [], {
            #localizedReason: localizedReason,
            #useErrorDialogs: useErrorDialogs,
            #stickyAuth: stickyAuth,
            #androidAuthStrings: androidAuthStrings,
            #iOSAuthStrings: iOSAuthStrings,
            #sensitiveTransaction: sensitiveTransaction,
            #biometricOnly: biometricOnly
          }),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> stopAuthentication() =>
      (super.noSuchMethod(Invocation.method(#stopAuthentication, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> isDeviceSupported() =>
      (super.noSuchMethod(Invocation.method(#isDeviceSupported, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<List<_i2.BiometricType>> getAvailableBiometrics() =>
      (super.noSuchMethod(Invocation.method(#getAvailableBiometrics, []),
              returnValue:
                  Future<List<_i2.BiometricType>>.value(<_i2.BiometricType>[]))
          as _i3.Future<List<_i2.BiometricType>>);
  @override
  String toString() => super.toString();
}
