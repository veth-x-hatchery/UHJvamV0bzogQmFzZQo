import "../../../scripts/Fastfile"
import "./Base.rb"

default_platform(:ios)

platform :ios do

  before_all do
    load_env
  end

  private_lane :ipa_file_path do
    "#{ios_build_output_directory}#{ENV['APP_IDENTIFIER']}.ipa"
  end

  private_lane :dSYM_file_path do
    "#{ios_build_output_directory}#{ENV['APP_IDENTIFIER']}.app.dSYM.zip"
  end
  
  desc "updates XCode project settings to use a different code signing based on method"
  private_lane :archive do |options|
    method = options[:method]

    profile_name = method == "ad-hoc" ? staging_profile_name : production_profile_name
    code_sign_identity = method == 'ad-hoc' ? "iPhone Developer" : "iPhone Distribution"
    
    update_code_signing_settings(
      profile_name: profile_name
      # code_sign_identity: code_sign_identity
    )

    build_app(
      workspace: ENV["WORKSPACE"],
      scheme: ENV["SCHEME"],
      export_team_id: ENV["TEAM_IDENTIFIER"],
      export_method: method,
      export_options: {
        provisioningProfiles: { 
          ENV["APP_IDENTIFIER"] => profile_name
        }
      },
      skip_profile_detection: true,
      skip_codesigning: true,
      clean: true,
      build_path: ios_build_output_directory,
      archive_path: ios_build_output_directory,
      derived_data_path: ios_build_output_directory,
      output_directory: ios_build_output_directory, 
      output_name: "#{ENV['APP_IDENTIFIER']}.ipa",
    )

    keychain_dispose

    puts lane_context[SharedValues::IPA_OUTPUT_PATH]
  end

  lane :build do |options|

    clean_environment

    fetch_dependencies

    build_autogenerated_code

    sign_enabled = options[:sign_enabled] || false
    
    sign_param = sign_enabled ? '' : '--no-codesign'

    config_only = options[:config_only] || false
    
    config_param = config_only ? '--config-only' : ''

    sh_on_root(command: "flutter build ios --no-pub --suppress-analytics --release #{dart_define} #{sign_param} #{config_param}")
  end

  lane :optional_changelog do
    %Q{
      Something that is new here
    }
  end

  lane :deploy_firebase do
    build(sign_enabled: false)

    archive(method: "ad-hoc")

    # https://github.com/fastlane/fastlane/issues/17288
    # workspace = '../YOUR_WORKSPACE_NAME.xcworkspace'
    # UPLOAD_SYMBOLS_PATH=`xcodebuild -workspace #{workspace} -showBuildSettings -scheme #{scheme} | grep -m 1 "BUILD_DIR" | grep -oEi "\/.*" | sed 's:Build/Products:SourcePackages/checkouts/firebase-ios-sdk/Crashlytics/upload-symbols:' | tr -d '\n'`

    # upload_symbols_to_crashlytics(
    #   dsym_path: dSYM_file_path,
    #   binary_path: ios_build_output_directory
    # )

    firebase_app_distribution(
      app: ENV['FIREBASE_APP_ID_IOS'],
      service_credentials_file: ENV["FIREBASE_DIST_SERVICE_ACCOUNT_FILE"],
      ipa_path: ipa_file_path,
      release_notes: optional_changelog,
      # groups: "developers, staging"
      testers_file: ENV['FIREBASE_TESTERS_FILE']
    )
  end

  lane :deploy_testflight do
    test

    build(sign_enabled: false)
 
    archive(method: "app-store")
 
    authenticate_apple_store
    
    upload_to_testflight(
      apple_id: ENV["APP_STORE_CONNECT_APPLE_ID"],
      ipa: ipa_file_path,
      uses_non_exempt_encryption: true,
      reject_build_waiting_for_review: true,
      expire_previous_builds: true,
      beta_app_feedback_email: "email@vethxhatchery.com",
      beta_app_description: "This is a description of my app",
      beta_app_review_info: {
        contact_email: "email@vethxhatchery.com",
        contact_first_name: "Connect",
        contact_last_name: "API",
        contact_phone: "+5511988887777",
        demo_account_name: "demo@vethxhatchery.com",
        demo_account_password: "connectapi",
        notes: "this is review note for the reviewer <3 thank you for reviewing"
      },
      localized_app_info: {
        "default": {
          feedback_email: "default@vethxhatchery.com",
          marketing_url: "https://vethxhatchery.com/marketing-defafult",
          privacy_policy_url: "https://vethxhatchery.com/privacy-defafult",
          description: "Default description",
        }
      },
      localized_build_info: {
        "default": {
          whats_new: "Default changelog",
        }
      },
      testers_file_path: ENV['TESTFLIGHT_TESTERS_FILE'],
      changelog: optional_changelog,
      skip_waiting_for_build_processing: true, # defaults to false if not specified
      distribute_external: true,
      groups: [
          "group-A",
          "group-B"
      ]
    )

  end

  lane :deploy_appstore do
    # sh_on_root(command: "sh scripts/cp_env.sh")
    # A small teak to improve upload speeds due to issues we encountered.
    # ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t Signiant"

    # test

    # build(sign_enabled: true, config_only: true)
    
    # archive(method: "app-store")

    upload_app_privacy_details_to_app_store(
      username: ENV["APPLE_ID"],
      team_name: ENV["TEAM_NAME"],
      app_identifier: ENV["APP_IDENTIFIER"],
      json_path: "fastlane/app_privacy_details.json"
    )

    authenticate_apple_store

    deliver(
      app_identifier: ENV["APP_IDENTIFIER"],
      ipa: ipa_file_path,
      skip_metadata: false,
      skip_screenshots: false,
      # overwrite_screenshots: true,
      submit_for_review: true,
      force: false,
      automatic_release: false,
      submission_information: {
        add_id_info_limits_tracking: true,
        add_id_info_serves_ads: false,
        add_id_info_tracks_action: true,
        add_id_info_tracks_install: true,
        add_id_info_uses_idfa: true,
        content_rights_has_rights: true,
        content_rights_contains_third_party_content: true,
        export_compliance_platform: 'ios',
        export_compliance_compliance_required: false,
        export_compliance_encryption_updated: false,
        export_compliance_app_type: nil,
        export_compliance_uses_encryption: false,
        export_compliance_is_exempt: false,
        export_compliance_contains_third_party_cryptography: false,
        export_compliance_contains_proprietary_cryptography: false,
        export_compliance_available_on_french_store: false
      },
      precheck_include_in_app_purchases: false,
    )
  end

  desc "download metadata"
  lane :metadata_update do
    
    ENV["DELIVER_FORCE_OVERWRITE"] = "1"
    
    authenticate_apple_store

    sh "fastlane deliver download_screenshots --app_identifier #{ENV['APP_IDENTIFIER']}"
    
    sh "fastlane deliver download_metadata --app_identifier #{ENV['APP_IDENTIFIER']}"
  end

  desc "download metadata"
  lane :metadata_init do
    
    authenticate_apple_store

    sh "fastlane deliver init --app_identifier #{ENV['APP_IDENTIFIER']}"
  end

  ############################# POST ##############################

  after_all do |lane|
    slack(
      message: "fastlane to iOS was successful",
      success: true,
      default_payloads: [:lane, :test_result, :git_branch, :git_author]
    )

    if (File.exist?(ipa_file_path))
      File.delete(ipa_file_path)
    end

    if (File.exist?(dSYM_file_path))
      File.delete(dSYM_file_path)
    end

    notification(subtitle: "Finished Building (iOS)", message: "Fastlane finished '#{lane}' successfully")
  end

  error do |lane, exception|
    slack(
      message: exception.message,
      success: false
    )
    
    notification(subtitle: "Finished Building (iOS)", message: "Fastlane '#{lane}' errored")
  end
end
