opt_out_usage

fastlane_require 'dotenv'

private_lane :load_env do
  Dotenv.overload '../../../infrastructure/.files/environment/.env'
end

desc "have an easy way to run flutter tasks on the root of the project"
def root_path
  Dir.pwd.sub(/.*\Kfastlane/, '').sub(/.*\Kandroid/, '').sub(/.*\Kios/, '').sub(/.*\K\/\//, '')
end

lane :sh_on_root do |options|
  command = options[:command]
  sh("cd #{root_path} && #{command}")
end

desc "realizando a limpeza do ambiente"
lane :clean_environment do
  sh_on_root(command: "flutter clean")
end

desc "obtendo as dependencias necessarias"
lane :fetch_dependencies do
  sh_on_root(command: "flutter pub get --suppress-analytics")
end

lane :build_autogenerated_code do
  sh_on_root(command: "flutter pub run build_runner build --delete-conflicting-outputs")
end

lane :lint do
  sh_on_root(command: "flutter format --suppress-analytics --set-exit-if-changed -n lib/main.dart lib/src/ test/")
end

lane :test do |options|
  # sh_on_root(command: "flutter test --no-pub --coverage --suppress-analytics")
  sh_on_root(command: "./test/coverate_settings.sh --no-pub")
end

lane :integration_tests do |options|
  sh_on_root(command: "./integration_test/integration_tests.sh")
end

lane :screenshots_tests do

  clean_environment

  fetch_dependencies

  sh_on_root(command: "dart tools/screenshots.dart")
end

lane :ios_build_output_directory do
  "#{root_path}/#{ENV['OUTPUT_DIRECTORY']}build/ios/"
end

lane :android_build_output_directory do
  "#{root_path}/#{ENV['OUTPUT_DIRECTORY']}build/android/"
end
