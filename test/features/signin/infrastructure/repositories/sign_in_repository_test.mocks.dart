// Mocks generated by Mockito 5.0.14 from annotations
// in vethx_beta/test/features/signin/infrastructure/repositories/sign_in_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:vethx_beta/core/network/network_info.dart' as _i10;
import 'package:vethx_beta/features/signin/domain/entities/user_entity.dart'
    as _i7;
import 'package:vethx_beta/features/signin/domain/entities/value_objects.dart'
    as _i9;
import 'package:vethx_beta/features/signin/domain/services/auth_failure.dart'
    as _i8;
import 'package:vethx_beta/features/signin/infrastructure/datasources/sign_in_local_data_source.dart'
    as _i4;
import 'package:vethx_beta/features/signin/infrastructure/datasources/sign_in_remote_data_source.dart'
    as _i6;
import 'package:vethx_beta/features/signin/infrastructure/models/user_model.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUserModel_0 extends _i1.Fake implements _i2.UserModel {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [ISignInLocalSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockISignInLocalSource extends _i1.Mock
    implements _i4.ISignInLocalSource {
  MockISignInLocalSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.UserModel> currentUser() =>
      (super.noSuchMethod(Invocation.method(#currentUser, []),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i5.Future<_i2.UserModel>);
  @override
  _i5.Future<void> cacheCurrentUser(_i2.UserModel? user) =>
      (super.noSuchMethod(Invocation.method(#cacheCurrentUser, [user]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ISignInRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockISignInRemoteSource extends _i1.Mock
    implements _i6.ISignInRemoteSource {
  MockISignInRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> emailAlreadyRegistered(String? email) =>
      (super.noSuchMethod(Invocation.method(#emailAlreadyRegistered, [email]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<_i2.UserModel> createUserWithEmailAndPassword(
          String? email, String? password) =>
      (super.noSuchMethod(
          Invocation.method(#createUserWithEmailAndPassword, [email, password]),
          returnValue:
              Future<_i2.UserModel>.value(_FakeUserModel_0())) as _i5
          .Future<_i2.UserModel>);
  @override
  _i5.Future<void> passwordReset(String? email) =>
      (super.noSuchMethod(Invocation.method(#passwordReset, [email]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i2.UserModel> signInWithFacebook() =>
      (super.noSuchMethod(Invocation.method(#signInWithFacebook, []),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i5.Future<_i2.UserModel>);
  @override
  _i5.Future<_i2.UserModel> currentUser() =>
      (super.noSuchMethod(Invocation.method(#currentUser, []),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i5.Future<_i2.UserModel>);
  @override
  _i5.Future<_i2.UserModel> signInAnonymously() =>
      (super.noSuchMethod(Invocation.method(#signInAnonymously, []),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i5.Future<_i2.UserModel>);
  @override
  _i5.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i7.User?> getSignedInUser() =>
      (super.noSuchMethod(Invocation.method(#getSignedInUser, []),
          returnValue: Future<_i7.User?>.value()) as _i5.Future<_i7.User?>);
  @override
  _i5.Future<_i3.Either<_i8.AuthFailure, bool>> emailIsAlreadyInUse(
          _i9.EmailAddress? emailAddress) =>
      (super.noSuchMethod(
              Invocation.method(#emailIsAlreadyInUse, [emailAddress]),
              returnValue: Future<_i3.Either<_i8.AuthFailure, bool>>.value(
                  _FakeEither_1<_i8.AuthFailure, bool>()))
          as _i5.Future<_i3.Either<_i8.AuthFailure, bool>>);
  @override
  _i5.Future<_i3.Either<_i8.AuthFailure, _i3.Unit>>
      registerWithEmailAndPassword(
              {_i9.EmailAddress? emailAddress, _i9.Password? password}) =>
          (super.noSuchMethod(
              Invocation.method(#registerWithEmailAndPassword, [],
                  {#emailAddress: emailAddress, #password: password}),
              returnValue: Future<_i3.Either<_i8.AuthFailure, _i3.Unit>>.value(
                  _FakeEither_1<_i8.AuthFailure, _i3.Unit>())) as _i5
              .Future<_i3.Either<_i8.AuthFailure, _i3.Unit>>);
  @override
  _i5.Future<_i3.Either<_i8.AuthFailure, _i3.Unit>> signInWithEmailAndPassword(
          {_i9.EmailAddress? emailAddress, _i9.Password? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#emailAddress: emailAddress, #password: password}),
              returnValue: Future<_i3.Either<_i8.AuthFailure, _i3.Unit>>.value(
                  _FakeEither_1<_i8.AuthFailure, _i3.Unit>()))
          as _i5.Future<_i3.Either<_i8.AuthFailure, _i3.Unit>>);
  @override
  _i5.Future<_i3.Either<_i8.AuthFailure, _i3.Unit>> signInWithGoogle() =>
      (super.noSuchMethod(Invocation.method(#signInWithGoogle, []),
              returnValue: Future<_i3.Either<_i8.AuthFailure, _i3.Unit>>.value(
                  _FakeEither_1<_i8.AuthFailure, _i3.Unit>()))
          as _i5.Future<_i3.Either<_i8.AuthFailure, _i3.Unit>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [INetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockINetworkInfo extends _i1.Mock implements _i10.INetworkInfo {
  MockINetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  String toString() => super.toString();
}
