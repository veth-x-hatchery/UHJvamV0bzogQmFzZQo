// Mocks generated by Mockito 5.0.14 from annotations
// in vethx_beta/test/features/signin/data/repositories/sign_in_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:vethx_beta/core/network/network_info.dart' as _i7;
import 'package:vethx_beta/features/signin/domain/entities/user_entity.dart'
    as _i6;
import 'package:vethx_beta/features/signin/infrastructure/datasources/sign_in_local_data_source.dart'
    as _i3;
import 'package:vethx_beta/features/signin/infrastructure/datasources/sign_in_remote_data_source.dart'
    as _i5;
import 'package:vethx_beta/features/signin/infrastructure/models/user_model.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUserModel_0 extends _i1.Fake implements _i2.UserModel {}

/// A class which mocks [ISignInLocalSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockISignInLocalSource extends _i1.Mock
    implements _i3.ISignInLocalSource {
  MockISignInLocalSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserModel> currentUser() =>
      (super.noSuchMethod(Invocation.method(#currentUser, []),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i4.Future<_i2.UserModel>);
  @override
  _i4.Future<void> cacheCurrentUser(_i2.UserModel? user) =>
      (super.noSuchMethod(Invocation.method(#cacheCurrentUser, [user]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ISignInRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockISignInRemoteSource extends _i1.Mock
    implements _i5.ISignInRemoteSource {
  MockISignInRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i4.Stream<_i6.User>> get onAuthStateChange =>
      (super.noSuchMethod(Invocation.getter(#onAuthStateChange),
              returnValue:
                  Future<_i4.Stream<_i6.User>>.value(Stream<_i6.User>.empty()))
          as _i4.Future<_i4.Stream<_i6.User>>);
  @override
  _i4.Future<bool> emailAlreadyRegistered(String? email) =>
      (super.noSuchMethod(Invocation.method(#emailAlreadyRegistered, [email]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.UserModel> createUserWithEmailAndPassword(
          String? email, String? password) =>
      (super.noSuchMethod(
          Invocation.method(#createUserWithEmailAndPassword, [email, password]),
          returnValue:
              Future<_i2.UserModel>.value(_FakeUserModel_0())) as _i4
          .Future<_i2.UserModel>);
  @override
  _i4.Future<void> passwordReset(String? email) =>
      (super.noSuchMethod(Invocation.method(#passwordReset, [email]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.UserModel> signInWithEmailAndPassword(
          String? email, String? password) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [email, password]),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i4.Future<_i2.UserModel>);
  @override
  _i4.Future<_i2.UserModel> signInWithGoogle() =>
      (super.noSuchMethod(Invocation.method(#signInWithGoogle, []),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i4.Future<_i2.UserModel>);
  @override
  _i4.Future<_i2.UserModel> signInWithFacebook() =>
      (super.noSuchMethod(Invocation.method(#signInWithFacebook, []),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i4.Future<_i2.UserModel>);
  @override
  _i4.Future<_i2.UserModel> currentUser() =>
      (super.noSuchMethod(Invocation.method(#currentUser, []),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i4.Future<_i2.UserModel>);
  @override
  _i4.Future<_i2.UserModel> signInAnonymously() =>
      (super.noSuchMethod(Invocation.method(#signInAnonymously, []),
              returnValue: Future<_i2.UserModel>.value(_FakeUserModel_0()))
          as _i4.Future<_i2.UserModel>);
  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [INetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockINetworkInfo extends _i1.Mock implements _i7.INetworkInfo {
  MockINetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  String toString() => super.toString();
}
