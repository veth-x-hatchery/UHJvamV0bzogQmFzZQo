// Mocks generated by Mockito 5.0.14 from annotations
// in vethx_beta/test/features/signin/presentation/bloc/sign_in_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:vethx_beta/features/signin/domain/core/usecase.dart' as _i8;
import 'package:vethx_beta/features/signin/domain/services/auth_failure.dart'
    as _i5;
import 'package:vethx_beta/features/signin/domain/usecases/sign_in_check_email.dart'
    as _i3;
import 'package:vethx_beta/features/signin/domain/usecases/sign_in_with_email_and_password.dart'
    as _i6;
import 'package:vethx_beta/features/signin/domain/usecases/sign_in_with_google.dart'
    as _i7;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [SignInCheckIfEmailIsInUse].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInCheckIfEmailIsInUse extends _i1.Mock
    implements _i3.SignInCheckIfEmailIsInUse {
  MockSignInCheckIfEmailIsInUse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, bool>> call(_i3.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i2.Either<_i5.AuthFailure, bool>>.value(
                  _FakeEither_0<_i5.AuthFailure, bool>()))
          as _i4.Future<_i2.Either<_i5.AuthFailure, bool>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SignInWithEmailAndPassword].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithEmailAndPassword extends _i1.Mock
    implements _i6.SignInWithEmailAndPassword {
  MockSignInWithEmailAndPassword() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, _i2.Unit>> call(_i6.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i2.Either<_i5.AuthFailure, _i2.Unit>>.value(
                  _FakeEither_0<_i5.AuthFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.AuthFailure, _i2.Unit>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SignInWithGoogle].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithGoogle extends _i1.Mock implements _i7.SignInWithGoogle {
  MockSignInWithGoogle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, _i2.Unit>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i2.Either<_i5.AuthFailure, _i2.Unit>>.value(
                  _FakeEither_0<_i5.AuthFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.AuthFailure, _i2.Unit>>);
  @override
  String toString() => super.toString();
}
