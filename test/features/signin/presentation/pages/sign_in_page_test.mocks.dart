// Mocks generated by Mockito 5.0.14 from annotations
// in vethx_beta/test/features/signin/presentation/pages/sign_in_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:ui' as _i11;

import 'package:bloc/bloc.dart' as _i8;
import 'package:flutter/cupertino.dart' as _i6;
import 'package:flutter/foundation.dart' as _i7;
import 'package:flutter/src/material/page.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:vethx_beta/features/signin/presentation/bloc/auth/auth_bloc.dart'
    as _i2;
import 'package:vethx_beta/features/signin/presentation/bloc/signin/sign_in_bloc.dart'
    as _i4;
import 'package:vethx_beta/features/signin/presentation/cubit/navigation_cubit.dart'
    as _i5;
import 'package:vethx_beta/features/signin/presentation/routes/sign_in_go_to.dart'
    as _i9;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeAuthState_0 extends _i1.Fake implements _i2.AuthState {}

class _FakeStreamSubscription_1<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

class _FakeSignInState_2 extends _i1.Fake implements _i4.SignInState {}

class _FakeNavigationState_3 extends _i1.Fake implements _i5.NavigationState {}

class _FakeWidget_4 extends _i1.Fake implements _i6.Widget {
  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeCurve_5 extends _i1.Fake implements _i6.Curve {}

class _FakeDuration_6 extends _i1.Fake implements Duration {}

class _FakeRouteSettings_7 extends _i1.Fake implements _i6.RouteSettings {}

class _FakeValueListenable_8<T> extends _i1.Fake
    implements _i7.ValueListenable<T> {}

class _FakeTickerFuture_9 extends _i1.Fake implements _i6.TickerFuture {}

class _FakeAnimationController_10 extends _i1.Fake
    implements _i6.AnimationController {}

class _FakeAnimation_11<T> extends _i1.Fake implements _i6.Animation<T> {}

/// A class which mocks [AuthBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthBloc extends _i1.Mock implements _i2.AuthBloc {
  MockAuthBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeAuthState_0()) as _i2.AuthState);
  @override
  _i3.Stream<_i2.AuthState> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i2.AuthState>.empty()) as _i3.Stream<_i2.AuthState>);
  @override
  _i3.Stream<_i2.AuthState> mapEventToState(_i2.AuthEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.AuthState>.empty())
          as _i3.Stream<_i2.AuthState>);
  @override
  void add(_i2.AuthEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.AuthEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i8.Transition<_i2.AuthEvent, _i2.AuthState>> transformEvents(
          _i3.Stream<_i2.AuthEvent>? events,
          _i8.TransitionFunction<_i2.AuthEvent, _i2.AuthState>? transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue:
                  Stream<_i8.Transition<_i2.AuthEvent, _i2.AuthState>>.empty())
          as _i3.Stream<_i8.Transition<_i2.AuthEvent, _i2.AuthState>>);
  @override
  void emit(_i2.AuthState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(_i8.Transition<_i2.AuthEvent, _i2.AuthState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i8.Transition<_i2.AuthEvent, _i2.AuthState>> transformTransitions(
          _i3.Stream<_i8.Transition<_i2.AuthEvent, _i2.AuthState>>?
              transitions) =>
      (super.noSuchMethod(
              Invocation.method(#transformTransitions, [transitions]),
              returnValue:
                  Stream<_i8.Transition<_i2.AuthEvent, _i2.AuthState>>.empty())
          as _i3.Stream<_i8.Transition<_i2.AuthEvent, _i2.AuthState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.AuthState> listen(
          void Function(_i2.AuthState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i2.AuthState>())
          as _i3.StreamSubscription<_i2.AuthState>);
  @override
  void onChange(_i8.Change<_i2.AuthState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SignInBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInBloc extends _i1.Mock implements _i4.SignInBloc {
  MockSignInBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SignInState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeSignInState_2()) as _i4.SignInState);
  @override
  _i3.Stream<_i4.SignInState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.SignInState>.empty())
          as _i3.Stream<_i4.SignInState>);
  @override
  void emit(_i4.SignInState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i4.SignInState> mapEventToState(_i4.SignInEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i4.SignInState>.empty())
          as _i3.Stream<_i4.SignInState>);
  @override
  void add(_i4.SignInEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i4.SignInEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i8.Transition<_i4.SignInEvent, _i4.SignInState>> transformEvents(
          _i3.Stream<_i4.SignInEvent>? events,
          _i8.TransitionFunction<_i4.SignInEvent, _i4.SignInState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i8.Transition<_i4.SignInEvent, _i4.SignInState>>.empty())
          as _i3.Stream<_i8.Transition<_i4.SignInEvent, _i4.SignInState>>);
  @override
  void onTransition(
          _i8.Transition<_i4.SignInEvent, _i4.SignInState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i8.Transition<_i4.SignInEvent, _i4.SignInState>>
      transformTransitions(
              _i3
                      .Stream<_i8.Transition<_i4.SignInEvent, _i4.SignInState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue: Stream<
                      _i8.Transition<_i4.SignInEvent, _i4.SignInState>>.empty())
              as _i3.Stream<_i8.Transition<_i4.SignInEvent, _i4.SignInState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i4.SignInState> listen(
          void Function(_i4.SignInState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i4.SignInState>())
          as _i3.StreamSubscription<_i4.SignInState>);
  @override
  void onChange(_i8.Change<_i4.SignInState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NavigationCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationCubit extends _i1.Mock implements _i5.NavigationCubit {
  MockNavigationCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.NavigationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeNavigationState_3()) as _i5.NavigationState);
  @override
  _i3.Stream<_i5.NavigationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.NavigationState>.empty())
          as _i3.Stream<_i5.NavigationState>);
  @override
  void goTo(_i9.SignInPageGoTo? parameters) =>
      super.noSuchMethod(Invocation.method(#goTo, [parameters]),
          returnValueForMissingStub: null);
  @override
  _i3.StreamSubscription<_i5.NavigationState> listen(
          void Function(_i5.NavigationState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i5.NavigationState>())
          as _i3.StreamSubscription<_i5.NavigationState>);
  @override
  void emit(_i5.NavigationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i8.Change<_i5.NavigationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MaterialPageRoute].
///
/// See the documentation for Mockito's code generation for more information.
class MockMaterialPageRoute<T> extends _i1.Mock
    implements _i10.MaterialPageRoute<T> {
  MockMaterialPageRoute() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.WidgetBuilder get builder =>
      (super.noSuchMethod(Invocation.getter(#builder),
              returnValue: (_i6.BuildContext context) => _FakeWidget_4())
          as _i6.WidgetBuilder);
  @override
  bool get maintainState =>
      (super.noSuchMethod(Invocation.getter(#maintainState), returnValue: false)
          as bool);
  @override
  String get debugLabel =>
      (super.noSuchMethod(Invocation.getter(#debugLabel), returnValue: '')
          as String);
  @override
  bool get fullscreenDialog =>
      (super.noSuchMethod(Invocation.getter(#fullscreenDialog),
          returnValue: false) as bool);
  @override
  bool get opaque =>
      (super.noSuchMethod(Invocation.getter(#opaque), returnValue: false)
          as bool);
  @override
  bool get barrierDismissible =>
      (super.noSuchMethod(Invocation.getter(#barrierDismissible),
          returnValue: false) as bool);
  @override
  bool get semanticsDismissible =>
      (super.noSuchMethod(Invocation.getter(#semanticsDismissible),
          returnValue: false) as bool);
  @override
  _i6.Curve get barrierCurve =>
      (super.noSuchMethod(Invocation.getter(#barrierCurve),
          returnValue: _FakeCurve_5()) as _i6.Curve);
  @override
  bool get offstage =>
      (super.noSuchMethod(Invocation.getter(#offstage), returnValue: false)
          as bool);
  @override
  set offstage(bool? value) =>
      super.noSuchMethod(Invocation.setter(#offstage, value),
          returnValueForMissingStub: null);
  @override
  bool get hasScopedWillPopCallback =>
      (super.noSuchMethod(Invocation.getter(#hasScopedWillPopCallback),
          returnValue: false) as bool);
  @override
  bool get canPop =>
      (super.noSuchMethod(Invocation.getter(#canPop), returnValue: false)
          as bool);
  @override
  bool get willDisposeAnimationController =>
      (super.noSuchMethod(Invocation.getter(#willDisposeAnimationController),
          returnValue: false) as bool);
  @override
  set willDisposeAnimationController(bool? _willDisposeAnimationController) =>
      super.noSuchMethod(
          Invocation.setter(
              #willDisposeAnimationController, _willDisposeAnimationController),
          returnValueForMissingStub: null);
  @override
  _i3.Future<T?> get completed =>
      (super.noSuchMethod(Invocation.getter(#completed),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  Duration get transitionDuration =>
      (super.noSuchMethod(Invocation.getter(#transitionDuration),
          returnValue: _FakeDuration_6()) as Duration);
  @override
  Duration get reverseTransitionDuration =>
      (super.noSuchMethod(Invocation.getter(#reverseTransitionDuration),
          returnValue: _FakeDuration_6()) as Duration);
  @override
  bool get finishedWhenPopped =>
      (super.noSuchMethod(Invocation.getter(#finishedWhenPopped),
          returnValue: false) as bool);
  @override
  List<_i6.OverlayEntry> get overlayEntries =>
      (super.noSuchMethod(Invocation.getter(#overlayEntries),
          returnValue: <_i6.OverlayEntry>[]) as List<_i6.OverlayEntry>);
  @override
  _i6.RouteSettings get settings =>
      (super.noSuchMethod(Invocation.getter(#settings),
          returnValue: _FakeRouteSettings_7()) as _i6.RouteSettings);
  @override
  _i7.ValueListenable<String?> get restorationScopeId =>
      (super.noSuchMethod(Invocation.getter(#restorationScopeId),
              returnValue: _FakeValueListenable_8<String?>())
          as _i7.ValueListenable<String?>);
  @override
  bool get willHandlePopInternally =>
      (super.noSuchMethod(Invocation.getter(#willHandlePopInternally),
          returnValue: false) as bool);
  @override
  _i3.Future<T?> get popped => (super.noSuchMethod(Invocation.getter(#popped),
      returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  bool get isCurrent =>
      (super.noSuchMethod(Invocation.getter(#isCurrent), returnValue: false)
          as bool);
  @override
  bool get isFirst =>
      (super.noSuchMethod(Invocation.getter(#isFirst), returnValue: false)
          as bool);
  @override
  bool get hasActiveRouteBelow =>
      (super.noSuchMethod(Invocation.getter(#hasActiveRouteBelow),
          returnValue: false) as bool);
  @override
  bool get isActive =>
      (super.noSuchMethod(Invocation.getter(#isActive), returnValue: false)
          as bool);
  @override
  _i6.Widget buildContent(_i6.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#buildContent, [context]),
          returnValue: _FakeWidget_4()) as _i6.Widget);
  @override
  bool canTransitionTo(_i6.TransitionRoute<dynamic>? nextRoute) =>
      (super.noSuchMethod(Invocation.method(#canTransitionTo, [nextRoute]),
          returnValue: false) as bool);
  @override
  bool canTransitionFrom(_i6.TransitionRoute<dynamic>? previousRoute) => (super
      .noSuchMethod(Invocation.method(#canTransitionFrom, [previousRoute]),
          returnValue: false) as bool);
  @override
  void setState(_i11.VoidCallback? fn) =>
      super.noSuchMethod(Invocation.method(#setState, [fn]),
          returnValueForMissingStub: null);
  @override
  _i6.Widget buildPage(
          _i6.BuildContext? context,
          _i6.Animation<double>? animation,
          _i6.Animation<double>? secondaryAnimation) =>
      (super.noSuchMethod(
          Invocation.method(
              #buildPage, [context, animation, secondaryAnimation]),
          returnValue: _FakeWidget_4()) as _i6.Widget);
  @override
  _i6.Widget buildTransitions(
          _i6.BuildContext? context,
          _i6.Animation<double>? animation,
          _i6.Animation<double>? secondaryAnimation,
          _i6.Widget? child) =>
      (super.noSuchMethod(
          Invocation.method(#buildTransitions,
              [context, animation, secondaryAnimation, child]),
          returnValue: _FakeWidget_4()) as _i6.Widget);
  @override
  void install() => super.noSuchMethod(Invocation.method(#install, []),
      returnValueForMissingStub: null);
  @override
  _i6.TickerFuture didPush() =>
      (super.noSuchMethod(Invocation.method(#didPush, []),
          returnValue: _FakeTickerFuture_9()) as _i6.TickerFuture);
  @override
  void didAdd() => super.noSuchMethod(Invocation.method(#didAdd, []),
      returnValueForMissingStub: null);
  @override
  _i3.Future<_i6.RoutePopDisposition> willPop() => (super.noSuchMethod(
      Invocation.method(#willPop, []),
      returnValue: Future<_i6.RoutePopDisposition>.value(
          _i6.RoutePopDisposition.pop)) as _i3.Future<_i6.RoutePopDisposition>);
  @override
  void addScopedWillPopCallback(_i6.WillPopCallback? callback) => super
      .noSuchMethod(Invocation.method(#addScopedWillPopCallback, [callback]),
          returnValueForMissingStub: null);
  @override
  void removeScopedWillPopCallback(_i6.WillPopCallback? callback) => super
      .noSuchMethod(Invocation.method(#removeScopedWillPopCallback, [callback]),
          returnValueForMissingStub: null);
  @override
  void didChangePrevious(_i6.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didChangePrevious, [previousRoute]),
          returnValueForMissingStub: null);
  @override
  void changedInternalState() =>
      super.noSuchMethod(Invocation.method(#changedInternalState, []),
          returnValueForMissingStub: null);
  @override
  void changedExternalState() =>
      super.noSuchMethod(Invocation.method(#changedExternalState, []),
          returnValueForMissingStub: null);
  @override
  Iterable<_i6.OverlayEntry> createOverlayEntries() =>
      (super.noSuchMethod(Invocation.method(#createOverlayEntries, []),
          returnValue: <_i6.OverlayEntry>[]) as Iterable<_i6.OverlayEntry>);
  @override
  String toString() => super.toString();
  @override
  _i6.AnimationController createAnimationController() => (super.noSuchMethod(
      Invocation.method(#createAnimationController, []),
      returnValue: _FakeAnimationController_10()) as _i6.AnimationController);
  @override
  _i6.Animation<double> createAnimation() =>
      (super.noSuchMethod(Invocation.method(#createAnimation, []),
          returnValue: _FakeAnimation_11<double>()) as _i6.Animation<double>);
  @override
  void didReplace(_i6.Route<dynamic>? oldRoute) =>
      super.noSuchMethod(Invocation.method(#didReplace, [oldRoute]),
          returnValueForMissingStub: null);
  @override
  bool didPop(T? result) =>
      (super.noSuchMethod(Invocation.method(#didPop, [result]),
          returnValue: false) as bool);
  @override
  void didPopNext(_i6.Route<dynamic>? nextRoute) =>
      super.noSuchMethod(Invocation.method(#didPopNext, [nextRoute]),
          returnValueForMissingStub: null);
  @override
  void didChangeNext(_i6.Route<dynamic>? nextRoute) =>
      super.noSuchMethod(Invocation.method(#didChangeNext, [nextRoute]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void didComplete(T? result) =>
      super.noSuchMethod(Invocation.method(#didComplete, [result]),
          returnValueForMissingStub: null);
  @override
  void addLocalHistoryEntry(_i6.LocalHistoryEntry? entry) =>
      super.noSuchMethod(Invocation.method(#addLocalHistoryEntry, [entry]),
          returnValueForMissingStub: null);
  @override
  void removeLocalHistoryEntry(_i6.LocalHistoryEntry? entry) =>
      super.noSuchMethod(Invocation.method(#removeLocalHistoryEntry, [entry]),
          returnValueForMissingStub: null);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i6.NavigatorObserver {
  @override
  void didPush(_i6.Route<dynamic>? route, _i6.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i6.Route<dynamic>? route, _i6.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i6.Route<dynamic>? route, _i6.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i6.Route<dynamic>? newRoute, _i6.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i6.Route<dynamic>? route, _i6.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
