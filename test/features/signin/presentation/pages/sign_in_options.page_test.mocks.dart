// Mocks generated by Mockito 5.0.14 from annotations
// in vethx_beta/test/features/signin/presentation/pages/sign_in_options.page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:bloc/bloc.dart' as _i8;
import 'package:flutter/src/widgets/navigator.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:vethx_beta/features/signin/presentation/bloc/credential/sign_in_credential_bloc.dart'
    as _i4;
import 'package:vethx_beta/features/signin/presentation/bloc/options/sign_in_options_bloc.dart'
    as _i2;
import 'package:vethx_beta/features/signin/presentation/bloc/register/sign_in_register_bloc.dart'
    as _i5;
import 'package:vethx_beta/features/signin/presentation/bloc/secret/sign_in_secret_bloc.dart'
    as _i6;
import 'package:vethx_beta/features/signin/presentation/cubit/navigation_cubit.dart'
    as _i7;
import 'package:vethx_beta/features/signin/presentation/routes/sign_in_go_to.dart'
    as _i9;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeSignInState_0 extends _i1.Fake implements _i2.SignInState {}

class _FakeStreamSubscription_1<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

class _FakeSignInCredentialState_2 extends _i1.Fake
    implements _i4.SignInCredentialState {}

class _FakeSignInRegisterState_3 extends _i1.Fake
    implements _i5.SignInRegisterState {}

class _FakeSignInSecretState_4 extends _i1.Fake
    implements _i6.SignInSecretState {}

class _FakeNavigationState_5 extends _i1.Fake implements _i7.NavigationState {}

/// A class which mocks [SignInOptionsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInOptionsBloc extends _i1.Mock implements _i2.SignInOptionsBloc {
  MockSignInOptionsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SignInState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeSignInState_0()) as _i2.SignInState);
  @override
  _i3.Stream<_i2.SignInState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.SignInState>.empty())
          as _i3.Stream<_i2.SignInState>);
  @override
  void emit(_i2.SignInState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i2.SignInState> mapEventToState(_i2.SignInEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.SignInState>.empty())
          as _i3.Stream<_i2.SignInState>);
  @override
  void add(_i2.SignInEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.SignInEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i8.Transition<_i2.SignInEvent, _i2.SignInState>> transformEvents(
          _i3.Stream<_i2.SignInEvent>? events,
          _i8.TransitionFunction<_i2.SignInEvent, _i2.SignInState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i8.Transition<_i2.SignInEvent, _i2.SignInState>>.empty())
          as _i3.Stream<_i8.Transition<_i2.SignInEvent, _i2.SignInState>>);
  @override
  void onTransition(
          _i8.Transition<_i2.SignInEvent, _i2.SignInState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i8.Transition<_i2.SignInEvent, _i2.SignInState>>
      transformTransitions(
              _i3
                      .Stream<_i8.Transition<_i2.SignInEvent, _i2.SignInState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue: Stream<
                      _i8.Transition<_i2.SignInEvent, _i2.SignInState>>.empty())
              as _i3.Stream<_i8.Transition<_i2.SignInEvent, _i2.SignInState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.SignInState> listen(
          void Function(_i2.SignInState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i2.SignInState>())
          as _i3.StreamSubscription<_i2.SignInState>);
  @override
  void onChange(_i8.Change<_i2.SignInState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SignInCredentialBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInCredentialBloc extends _i1.Mock
    implements _i4.SignInCredentialBloc {
  MockSignInCredentialBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SignInCredentialState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeSignInCredentialState_2())
          as _i4.SignInCredentialState);
  @override
  _i3.Stream<_i4.SignInCredentialState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.SignInCredentialState>.empty())
          as _i3.Stream<_i4.SignInCredentialState>);
  @override
  _i3.Stream<_i4.SignInCredentialState> mapEventToState(
          _i4.SignInCredentialEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i4.SignInCredentialState>.empty())
          as _i3.Stream<_i4.SignInCredentialState>);
  @override
  void add(_i4.SignInCredentialEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i4.SignInCredentialEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i8.Transition<_i4.SignInCredentialEvent, _i4.SignInCredentialState>>
      transformEvents(
              _i3.Stream<_i4.SignInCredentialEvent>? events,
              _i8.TransitionFunction<_i4.SignInCredentialEvent,
                      _i4.SignInCredentialState>?
                  transitionFn) =>
          (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue:
                  Stream<_i8.Transition<_i4.SignInCredentialEvent, _i4.SignInCredentialState>>.empty()) as _i3
              .Stream<_i8.Transition<_i4.SignInCredentialEvent, _i4.SignInCredentialState>>);
  @override
  void emit(_i4.SignInCredentialState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i8.Transition<_i4.SignInCredentialEvent, _i4.SignInCredentialState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i8.Transition<_i4.SignInCredentialEvent, _i4.SignInCredentialState>>
      transformTransitions(
              _i3.Stream<_i8.Transition<_i4.SignInCredentialEvent, _i4.SignInCredentialState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i8.Transition<_i4.SignInCredentialEvent, _i4.SignInCredentialState>>.empty())
              as _i3.Stream<
                  _i8.Transition<_i4.SignInCredentialEvent, _i4.SignInCredentialState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i4.SignInCredentialState> listen(
          void Function(_i4.SignInCredentialState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue:
                  _FakeStreamSubscription_1<_i4.SignInCredentialState>())
          as _i3.StreamSubscription<_i4.SignInCredentialState>);
  @override
  void onChange(_i8.Change<_i4.SignInCredentialState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SignInRegisterBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInRegisterBloc extends _i1.Mock
    implements _i5.SignInRegisterBloc {
  MockSignInRegisterBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.SignInRegisterState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeSignInRegisterState_3()) as _i5.SignInRegisterState);
  @override
  _i3.Stream<_i5.SignInRegisterState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.SignInRegisterState>.empty())
          as _i3.Stream<_i5.SignInRegisterState>);
  @override
  _i3.Stream<_i5.SignInRegisterState> mapEventToState(
          _i5.SignInRegisterEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i5.SignInRegisterState>.empty())
          as _i3.Stream<_i5.SignInRegisterState>);
  @override
  void add(_i5.SignInRegisterEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i5.SignInRegisterEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i8.Transition<_i5.SignInRegisterEvent, _i5.SignInRegisterState>>
      transformEvents(
              _i3.Stream<_i5.SignInRegisterEvent>? events,
              _i8.TransitionFunction<_i5.SignInRegisterEvent, _i5.SignInRegisterState>?
                  transitionFn) =>
          (super.noSuchMethod(
                  Invocation.method(#transformEvents, [events, transitionFn]),
                  returnValue:
                      Stream<_i8.Transition<_i5.SignInRegisterEvent, _i5.SignInRegisterState>>.empty())
              as _i3.Stream<
                  _i8.Transition<_i5.SignInRegisterEvent, _i5.SignInRegisterState>>);
  @override
  void emit(_i5.SignInRegisterState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i8.Transition<_i5.SignInRegisterEvent, _i5.SignInRegisterState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i8.Transition<_i5.SignInRegisterEvent, _i5.SignInRegisterState>>
      transformTransitions(
              _i3.Stream<_i8.Transition<_i5.SignInRegisterEvent, _i5.SignInRegisterState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i8.Transition<_i5.SignInRegisterEvent, _i5.SignInRegisterState>>.empty())
              as _i3.Stream<
                  _i8.Transition<_i5.SignInRegisterEvent, _i5.SignInRegisterState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i5.SignInRegisterState> listen(
          void Function(_i5.SignInRegisterState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i5.SignInRegisterState>())
          as _i3.StreamSubscription<_i5.SignInRegisterState>);
  @override
  void onChange(_i8.Change<_i5.SignInRegisterState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SignInSecretBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInSecretBloc extends _i1.Mock implements _i6.SignInSecretBloc {
  MockSignInSecretBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.SignInSecretState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeSignInSecretState_4()) as _i6.SignInSecretState);
  @override
  _i3.Stream<_i6.SignInSecretState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i6.SignInSecretState>.empty())
          as _i3.Stream<_i6.SignInSecretState>);
  @override
  _i3.Stream<_i6.SignInSecretState> mapEventToState(
          _i6.SignInSecretEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i6.SignInSecretState>.empty())
          as _i3.Stream<_i6.SignInSecretState>);
  @override
  void add(_i6.SignInSecretEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i6.SignInSecretEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i8.Transition<_i6.SignInSecretEvent, _i6.SignInSecretState>>
      transformEvents(
              _i3.Stream<_i6.SignInSecretEvent>? events,
              _i8.TransitionFunction<_i6.SignInSecretEvent, _i6.SignInSecretState>?
                  transitionFn) =>
          (super.noSuchMethod(
                  Invocation.method(#transformEvents, [events, transitionFn]),
                  returnValue:
                      Stream<_i8.Transition<_i6.SignInSecretEvent, _i6.SignInSecretState>>.empty())
              as _i3.Stream<
                  _i8.Transition<_i6.SignInSecretEvent, _i6.SignInSecretState>>);
  @override
  void emit(_i6.SignInSecretState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i8.Transition<_i6.SignInSecretEvent, _i6.SignInSecretState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i8.Transition<_i6.SignInSecretEvent, _i6.SignInSecretState>>
      transformTransitions(
              _i3.Stream<_i8.Transition<_i6.SignInSecretEvent, _i6.SignInSecretState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i8.Transition<_i6.SignInSecretEvent, _i6.SignInSecretState>>.empty())
              as _i3.Stream<
                  _i8.Transition<_i6.SignInSecretEvent, _i6.SignInSecretState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i6.SignInSecretState> listen(
          void Function(_i6.SignInSecretState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i6.SignInSecretState>())
          as _i3.StreamSubscription<_i6.SignInSecretState>);
  @override
  void onChange(_i8.Change<_i6.SignInSecretState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NavigationCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationCubit extends _i1.Mock implements _i7.NavigationCubit {
  MockNavigationCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.NavigationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeNavigationState_5()) as _i7.NavigationState);
  @override
  _i3.Stream<_i7.NavigationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i7.NavigationState>.empty())
          as _i3.Stream<_i7.NavigationState>);
  @override
  void goTo(_i9.SignInPageGoTo? parameters) =>
      super.noSuchMethod(Invocation.method(#goTo, [parameters]),
          returnValueForMissingStub: null);
  @override
  _i3.StreamSubscription<_i7.NavigationState> listen(
          void Function(_i7.NavigationState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i7.NavigationState>())
          as _i3.StreamSubscription<_i7.NavigationState>);
  @override
  void emit(_i7.NavigationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i8.Change<_i7.NavigationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i10.NavigatorObserver {
  @override
  void didPush(
          _i10.Route<dynamic>? route, _i10.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i10.Route<dynamic>? route, _i10.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i10.Route<dynamic>? route, _i10.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i10.Route<dynamic>? newRoute, _i10.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i10.Route<dynamic>? route, _i10.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
