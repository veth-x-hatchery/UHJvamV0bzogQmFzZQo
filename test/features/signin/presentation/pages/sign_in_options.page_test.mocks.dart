// Mocks generated by Mockito 5.0.14 from annotations
// in vethx_beta/test/features/signin/presentation/pages/sign_in_options.page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:bloc/bloc.dart' as _i5;
import 'package:flutter/src/widgets/navigator.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:vethx_beta/features/signin/presentation/bloc/options/sign_in_options_bloc.dart'
    as _i2;
import 'package:vethx_beta/features/signin/presentation/cubit/navigation_cubit.dart'
    as _i4;
import 'package:vethx_beta/features/signin/presentation/routes/sign_in_go_to.dart'
    as _i6;
import 'package:vethx_beta/features/signin/sign_in_service_locator.dart' as _i8;

import 'sign_in_options.page_test.dart' as _i9;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeSignInOptionsState_0 extends _i1.Fake
    implements _i2.SignInOptionsState {}

class _FakeStreamSubscription_1<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

class _FakeNavigationState_2 extends _i1.Fake implements _i4.NavigationState {}

/// A class which mocks [SignInOptionsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInOptionsBloc extends _i1.Mock implements _i2.SignInOptionsBloc {
  MockSignInOptionsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SignInOptionsState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeSignInOptionsState_0()) as _i2.SignInOptionsState);
  @override
  _i3.Stream<_i2.SignInOptionsState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.SignInOptionsState>.empty())
          as _i3.Stream<_i2.SignInOptionsState>);
  @override
  void emit(_i2.SignInOptionsState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i2.SignInOptionsState> mapEventToState(
          _i2.SignInOptionsEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.SignInOptionsState>.empty())
          as _i3.Stream<_i2.SignInOptionsState>);
  @override
  void add(_i2.SignInOptionsEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.SignInOptionsEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.SignInOptionsEvent, _i2.SignInOptionsState>>
      transformEvents(
              _i3.Stream<_i2.SignInOptionsEvent>? events,
              _i5.TransitionFunction<_i2.SignInOptionsEvent, _i2.SignInOptionsState>?
                  transitionFn) =>
          (super.noSuchMethod(
                  Invocation.method(#transformEvents, [events, transitionFn]),
                  returnValue:
                      Stream<_i5.Transition<_i2.SignInOptionsEvent, _i2.SignInOptionsState>>.empty())
              as _i3.Stream<
                  _i5.Transition<_i2.SignInOptionsEvent, _i2.SignInOptionsState>>);
  @override
  void onTransition(
          _i5.Transition<_i2.SignInOptionsEvent, _i2.SignInOptionsState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.SignInOptionsEvent, _i2.SignInOptionsState>>
      transformTransitions(
              _i3.Stream<_i5.Transition<_i2.SignInOptionsEvent, _i2.SignInOptionsState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i5.Transition<_i2.SignInOptionsEvent, _i2.SignInOptionsState>>.empty())
              as _i3.Stream<
                  _i5.Transition<_i2.SignInOptionsEvent, _i2.SignInOptionsState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.SignInOptionsState> listen(
          void Function(_i2.SignInOptionsState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i2.SignInOptionsState>())
          as _i3.StreamSubscription<_i2.SignInOptionsState>);
  @override
  void onChange(_i5.Change<_i2.SignInOptionsState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NavigationCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationCubit extends _i1.Mock implements _i4.NavigationCubit {
  MockNavigationCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.NavigationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeNavigationState_2()) as _i4.NavigationState);
  @override
  _i3.Stream<_i4.NavigationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.NavigationState>.empty())
          as _i3.Stream<_i4.NavigationState>);
  @override
  void goTo(_i6.SignInPageGoTo? parameters) =>
      super.noSuchMethod(Invocation.method(#goTo, [parameters]),
          returnValueForMissingStub: null);
  @override
  _i3.StreamSubscription<_i4.NavigationState> listen(
          void Function(_i4.NavigationState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i4.NavigationState>())
          as _i3.StreamSubscription<_i4.NavigationState>);
  @override
  void emit(_i4.NavigationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i5.Change<_i4.NavigationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i7.NavigatorObserver {
  @override
  void didPush(_i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i7.Route<dynamic>? newRoute, _i7.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i7.Route<dynamic>? route, _i7.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ISignInServiceLocator].
///
/// See the documentation for Mockito's code generation for more information.
class MockISignInServiceLocator extends _i1.Mock
    implements _i8.ISignInServiceLocator {
  MockISignInServiceLocator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  T get<T extends Object>() => (super.noSuchMethod(Invocation.method(#get, []),
      returnValue: _i9.getSignServiceLocator<T>()) as T);
  @override
  String toString() => super.toString();
}
